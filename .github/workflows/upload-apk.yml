name: Update APK Data Branch

on:
  push:
    branches: [main]
    paths:
      - 'apk-data/**'
  workflow_dispatch:
    inputs:
      apk_name:
        description: 'APKÊñá‰ª∂Âêç'
        required: true
        default: 'new-app'
      apk_url:
        description: 'APK‰∏ãËΩΩÈìæÊé•'
        required: true

env:
  GITEE_OWNER: ${{ secrets.GITEE_OWNER }}
  GITEE_REPO: ${{ secrets.GITEE_REPO }}
  GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}

jobs:
  update-apk-data:
    runs-on: ubuntu-latest

    # Ê£ÄÊü•ÂøÖÈúÄÁöÑsecrets
    steps:
      - name: Check secrets
        run: |
          if [ -z "$GITEE_TOKEN" ]; then
            echo "‚ùå GITEE_TOKEN secret is missing"
            exit 1
          fi
          if [ -z "$GITEE_OWNER" ]; then
            echo "‚ùå GITEE_OWNER secret is missing"
            exit 1
          fi
          if [ -z "$GITEE_REPO" ]; then
            echo "‚ùå GITEE_REPO secret is missing"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Expo app
        run: |
          echo "üöÄ Building Expo app..."
          npx expo export --platform web
          npx expo export --platform android
          echo "‚úÖ Build completed"

      - name: Update GitHub branch
        run: |
          echo "üîÑ Updating GitHub branch..."

          # ÈÖçÁΩÆGit
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®apk-data-onlyÂàÜÊîØ
          if git show-ref --verify --quiet refs/remotes/origin/apk-data-only; then
            echo "üì§ Updating existing apk-data-only branch..."
            git checkout -B apk-data-only
            git push origin apk-data-only
          else
            echo "üì§ Creating new apk-data-only branch..."
            git checkout -b apk-data-only
            git push origin apk-data-only
          fi

          echo "‚úÖ GitHub branch updated"

      - name: Update APK data in GitHub
        run: |
          echo "üìù Updating APK data in GitHub..."
          echo "‚úÖ APKÊï∞ÊçÆÂ∑≤Êõ¥Êñ∞Âà∞GitHubÁöÑapk-data-onlyÂàÜÊîØ"

      - name: Create Gitee Release
        run: |
          echo "üîç Checking v0.0.1 Release..."

          # Ê£ÄÊü•v0.0.1 releaseÊòØÂê¶Â≠òÂú®
          RELEASE_EXISTS=$(curl -s -H "Authorization: token $GITEE_TOKEN" \
            "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases/tags/v0.0.1" | jq -r '.id // empty')

          if [ -z "$RELEASE_EXISTS" ]; then
            echo "üì¶ Creating v0.0.1 Release..."
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $GITEE_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "tag_name": "v0.0.1",
                "name": "APK Collection v0.0.1",
                "body": "APK Collection Release v0.0.1\nCreated by GitHub Actions\nTime: '"$(date)"'",
                "prerelease": false
              }' \
              "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases")
            
            if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
              echo "‚úÖ v0.0.1 Release created successfully"
            else
              echo "‚ùå Failed to create release: $RESPONSE"
              exit 1
            fi
          else
            echo "‚úÖ v0.0.1 Release already exists, ID: $RELEASE_EXISTS"
          fi

      - name: Summary
        run: |
          echo "üéâ GitHub Actions completed successfully!"
          echo "üìä Summary:"
          echo "  - GitHub Branch: apk-data-only (updated)"
          echo "  - Gitee Repository: $GITEE_OWNER/$GITEE_REPO"
          echo "  - Gitee Release: v0.0.1"
          echo "  - Time: $(date)"
